version: '2.1'
services:
  database:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB:       "ostock_dev"
    volumes:
        - ./data/database/init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./data/database/data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  configserver:
    image: 890890123890/configserver:0.0.1-SNAPSHOT
    container_name: configServer
    ports:
       - "8071:8071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      backend:
        aliases:
          - "configserver"

  eurekaserver:
    image: 890890123890/eurekaserver:0.0.1-SNAPSHOT
    restart: always
    container_name: eurekaServer
    ports:
      - "8070:8070"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started  
    networks:
      backend:
        aliases:
          - "eurekaserver"

  gatewayserver:
    image: 890890123890/gatewayserver:0.0.1-SNAPSHOT
    restart: always
    container_name: gateway
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      EUREKASERVER_PORT: "8070"
      CONFIGSERVER_PORT: "8071"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"

  kafkaserver:
    image: wurstmeister/kafka:latest
    restart: always
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: "my-topic:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_TOPIC_METADATA_REFRESH_INTERVAL_MS: "60000"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"

  redisserver:
    image: redis:alpine
    container_name: redis
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

  keycloak:
    image: quay.io/keycloak/keycloak
    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./data/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command:
      - start-dev
      - --import-realm
    ports:
      - "8100:8080"
    networks:
      backend:
        aliases:
          - "keycloak"

  licensingservice:
    image: 890890123890/licensing-service:0.0.1-SNAPSHOT
    restart: always
    container_name: licensing-service
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT:   "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY:       "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      kafkaserver:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - backend

  organizationservice:
    image: 890890123890/organization:0.0.1-SNAPSHOT
    restart: always
    container_name: organization-service
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT:   "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY:       "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      kafkaserver:
        condition: service_started
    ports:
      - "8090:8090"
    networks:
      - backend

  tempo:
    image: grafana/tempo
    extra_hosts: ['host.docker.internal:host-gateway']
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./data/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./data/tempo/tmp:/tmp/tempo
    ports:
      - "14268"
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "tempo"

  loki:
    image: grafana/loki
    extra_hosts: ['host.docker.internal:host-gateway']
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    networks:
      backend:
        aliases:
          - "loki"

  prometheus:
    image: prom/prometheus
    extra_hosts: ['host.docker.internal:host-gateway']
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./data/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      backend:
        aliases:
          - "prometheus"

  grafana:
    image: grafana/grafana
    extra_hosts: ['host.docker.internal:host-gateway']
    volumes:
      - ./data/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./data/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      backend:
        aliases:
          - "grafana"
volumes:
  esdata1:
    driver: local
networks:
  backend:
    driver: bridge